/* Generated By:JavaCC: Do not edit this line. Reader.java */
package AnalyseSyntaxique;

import BaseDeDonnee.*;
import Operateur.*;
import test.*;

import java.util.List;
import java.util.ArrayList;

public class Reader implements ReaderConstants {
  static BD bd;
  static protected SchemaC schema(ArrayList<Attribut> l, FullInMemoryRelation r) {
          if(l.size()==0) return r.getSchema();
          Attribut[] atts = new Attribut[l.size()];
          { int i = 0; for(Attribut t : l) atts[i++]= r.getSchema().getAttribute(r.getSchema().getOrdreAttribut(t)); }
          return new SchemaC(atts);
        }
  public static void main(String[] args) throws ParseException {
    SchemaC sc = new SchemaC(
                                new Attribut("nom", new TypeString(), ProprietesAttribut.primaire),
                                new Attribut("prenom", new TypeString(), ProprietesAttribut.Standard),
                                new Attribut("age", new Entier(), ProprietesAttribut.Standard));
                FullInMemoryRelation relation = new FullInMemoryRelation("personne1", sc);

                relation.add(new Tuple("DIALLO","MAMADOU",21));
                relation.add(new Tuple("BAH","OUMAR",22));
                relation.add(new Tuple("DIALLO","SORY",19));
                relation.add(new Tuple("MOURTHADHOI","SULTAN",20));
                relation.add(new Tuple("ZIANI","NOUREDINE",18));



                FullInMemoryRelation r1 = new FullInMemoryRelation("personne2", sc);
                r1.add(new Tuple("DIALLO","MAMADOU",21));
                r1.add(new Tuple("DIALLO","SORY",19));
                r1.add(new Tuple("BAH","OUMAR",22));
                r1.add(new Tuple("CAMARA","ABOU",23));

                FullInMemoryRelation r2= new FullInMemoryRelation("personne3", sc);
                r2.add(new Tuple("DIALLO","MAMADOU",21));
                r2.add(new Tuple("BARRY","SORY",19));
                r2.add(new Tuple("CONDE","MAMADY",22));
                r2.add(new Tuple("BODIANG","ASSANE",23));

                BD base;
                ArrayList<Relation> rela=  new ArrayList<Relation >();
                                rela.add(relation);
                                rela.add(r1);
                                rela.add(r2);
                                base=new BD(rela);
                                bd=base;
                                //Selection
         System.out.println("Saisir votre requete :");
     Reader r=new Reader(System.in);
        for(Tuple t: r.interrogation_selection()){
                        for(Object o : t){
                                System.out.print(o+" ");
                        }
                        System.out.println();
                }
//Projection
         System.out.println("Saisir votre requete :");
    // Reader r2=new Reader(System.in);
        for(Tuple t: r.interrogation()){
                        for(Object o : t){
                                System.out.print(o+" ");
                        }
                        System.out.println();
                }
  }

  static final public Projection interrogation() throws ParseException {
                               ArrayList<Attribut> l;FullInMemoryRelation r;
    jj_consume_token(SELECT);
    l = resultat_recherche();
    jj_consume_token(FROM);
    r = relation_recherche();
    jj_consume_token(SEMICOMMA);
    {if (true) return new Projection(r,schema(l,r));}
    throw new Error("Missing return statement in function");
  }

  static final public Selection interrogation_selection() throws ParseException {
                                       ArrayList<Attribut> l;FullInMemoryRelation r;Attribut attrib; Predicat pre=new Predicat() {

                        @Override
                        public boolean eval(Tuple t){
                            //String cond=valeur_recherche();
                                return ((String)t.getValeur(0)).equals("BAH");

                        }
                };;
    jj_consume_token(SELECT);
    l = resultat_recherche();
    jj_consume_token(FROM);
    r = relation_recherche();
    jj_consume_token(WHERE);
    attrib = condition_recherche();
    operation_comparaison();
    valeur_recherche();
    jj_consume_token(SEMICOMMA);
    {if (true) return new Selection(r,schema(l,r), pre);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Attribut > resultat_recherche() throws ParseException {
                                             Token t; ArrayList<Attribut > l = new ArrayList<Attribut >();ProprietesAttribut typ=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
            {if (true) return l;}
      break;
    case NOM:
      t = jj_consume_token(NOM);
             l.add(new Attribut(t.image,VOID.type,typ.Standard));
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(NOM);
                                                                                          l.add(new Attribut(t.image,VOID.type,typ.Standard));
      }
                                                                                                                                                      {if (true) return l;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public FullInMemoryRelation relation_recherche() throws ParseException {
                                             Token t;
    t = jj_consume_token(NOM);
               {if (true) return bd.getRelation(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Attribut condition_recherche() throws ParseException {
                                  Token t;ProprietesAttribut typ=null ;
    t = jj_consume_token(NOM);
              {if (true) return new Attribut(t.image,VOID.type,typ.Standard);}
    throw new Error("Missing return statement in function");
  }

  static final public String valeur_recherche() throws ParseException {
                              Token t;
    t = jj_consume_token(NOM);
              {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void operation_comparaison() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EGAL:
      jj_consume_token(EGAL);
      break;
    case DIFFERENT:
      jj_consume_token(DIFFERENT);
      break;
    case INFERIEUR:
      jj_consume_token(INFERIEUR);
      break;
    case SUPPERIEUR:
      jj_consume_token(SUPPERIEUR);
      break;
    case SUPEGAL:
      jj_consume_token(SUPEGAL);
      break;
    case INFEGAL:
      jj_consume_token(INFEGAL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ReaderTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x400400,0x7e000,};
   }

  /** Constructor with InputStream. */
  public Reader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Reader(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Reader(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Reader(ReaderTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
